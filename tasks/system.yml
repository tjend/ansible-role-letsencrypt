---

- name: create the letsencrypt user
  user:
    name: "{{ letsencrypt_user }}"
    home: "{{ letsencrypt_base_dir }}"
    createhome: no

- name: create the letsencrypt base and certificates directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ letsencrypt_user }}"
    group: www-data
    mode: 02750
  loop:
  - "{{ letsencrypt_base_dir }}"
  - "{{ letsencrypt_base_dir }}/.lego"
  - "{{ letsencrypt_base_dir }}/.lego/certificates"

- name: create the letsencrypt client binary directory
  file:
    path: "{{ letsencrypt_base_dir }}/bin"
    state: directory
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_user }}"
    mode: 0700

- name: get the compressed letsencrypt client binary
  unarchive:
    src: "{{ letsencrypt_client_url }}"
    dest: "{{ letsencrypt_base_dir }}/bin"
    remote_src: true
    creates: "{{ letsencrypt_bin_file }}"
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_user }}"

- name: delete old acme v1 directories
  file:
    path: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v01.api.letsencrypt.org"
    state: absent

- name: create the letsencrypt account directories
  file:
    path: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email }}/keys"
    state: directory
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_user }}"
    mode: 0700
    recurse: yes
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

- name: copy the account json into place
  template:
    dest: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email | mandatory }}/account.json"
    group: "{{ letsencrypt_user }}"
    owner: "{{ letsencrypt_user }}"
    mode: 0600
    src: account.json.j2
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

- name: copy the account key into place
  copy:
    content: "{{ item.key }}"
    dest: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email | mandatory }}/keys/{{ item.account_email }}.key"
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_user }}"
    mode: 0700
  diff: no
  when: item.key is defined
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

# Create an account number and key if none is given.
# To reuse the account number and key, add the account number and key to the 'letsencrypt_account' variable.
- name: generate a letsencrypt account number and key
  command: "{{ letsencrypt_bin_file }} --accept-tos --email=\"{{ item.account_email | mandatory }}\" run"
  args:
    chdir: "{{ letsencrypt_base_dir }}"
    creates: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email }}/keys/{{ item.account_email }}.key"
  become: yes
  become_user: "{{ letsencrypt_user }}"
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"
  ignore_errors: yes # the lego command fails as it always wants to create a certificate, we can ignore this failure as the account json and key still get created

- name: get the contents of newly created account json
  slurp:
    src: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email | mandatory }}/account.json"
  register: letsencrypt_account_json_created_content
  when: item.key is not defined
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

- name: show the contents of newly created account json(the account number is at the end of the uri)
  debug:
    msg: "{{ item.content | b64decode }}"
  when: item.content is defined
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

- name: get the contents of newly created account key
  slurp:
    src: "{{ letsencrypt_base_dir }}/.lego/accounts/acme-v02.api.letsencrypt.org/{{ item.account_email | mandatory }}/keys/{{ item.account_email }}.key"
  register: letsencrypt_account_key_created_content
  when: item.key is not defined
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"

- name: show the contents of newly created account key files
  debug:
    msg: "{{ item.content | b64decode }}"
  when: item.content is defined
  loop: "{{ letsencrypt_accounts }}"
  loop_control:
    label: "{{ item.account_email }}"
